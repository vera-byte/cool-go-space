// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: v1/space.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Crud_Page_FullMethodName   = "/space.Crud/Page"
	Crud_Add_FullMethodName    = "/space.Crud/Add"
	Crud_Delet_FullMethodName  = "/space.Crud/Delet"
	Crud_Info_FullMethodName   = "/space.Crud/Info"
	Crud_Update_FullMethodName = "/space.Crud/Update"
	Crud_List_FullMethodName   = "/space.Crud/List"
)

// CrudClient is the client API for Crud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudClient interface {
	Page(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageRes, error)
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRes, error)
	Delet(ctx context.Context, in *DeletReq, opts ...grpc.CallOption) (*DeletRes, error)
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error)
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error)
}

type crudClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudClient(cc grpc.ClientConnInterface) CrudClient {
	return &crudClient{cc}
}

func (c *crudClient) Page(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageRes, error) {
	out := new(PageRes)
	err := c.cc.Invoke(ctx, Crud_Page_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRes, error) {
	out := new(AddRes)
	err := c.cc.Invoke(ctx, Crud_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) Delet(ctx context.Context, in *DeletReq, opts ...grpc.CallOption) (*DeletRes, error) {
	out := new(DeletRes)
	err := c.cc.Invoke(ctx, Crud_Delet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error) {
	out := new(InfoRes)
	err := c.cc.Invoke(ctx, Crud_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error) {
	out := new(UpdateRes)
	err := c.cc.Invoke(ctx, Crud_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error) {
	out := new(ListRes)
	err := c.cc.Invoke(ctx, Crud_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServer is the server API for Crud service.
// All implementations must embed UnimplementedCrudServer
// for forward compatibility
type CrudServer interface {
	Page(context.Context, *PageReq) (*PageRes, error)
	Add(context.Context, *AddReq) (*AddRes, error)
	Delet(context.Context, *DeletReq) (*DeletRes, error)
	Info(context.Context, *InfoReq) (*InfoRes, error)
	Update(context.Context, *UpdateReq) (*UpdateRes, error)
	List(context.Context, *ListReq) (*ListRes, error)
	mustEmbedUnimplementedCrudServer()
}

// UnimplementedCrudServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServer struct {
}

func (UnimplementedCrudServer) Page(context.Context, *PageReq) (*PageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (UnimplementedCrudServer) Add(context.Context, *AddReq) (*AddRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCrudServer) Delet(context.Context, *DeletReq) (*DeletRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delet not implemented")
}
func (UnimplementedCrudServer) Info(context.Context, *InfoReq) (*InfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedCrudServer) Update(context.Context, *UpdateReq) (*UpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCrudServer) List(context.Context, *ListReq) (*ListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCrudServer) mustEmbedUnimplementedCrudServer() {}

// UnsafeCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServer will
// result in compilation errors.
type UnsafeCrudServer interface {
	mustEmbedUnimplementedCrudServer()
}

func RegisterCrudServer(s grpc.ServiceRegistrar, srv CrudServer) {
	s.RegisterService(&Crud_ServiceDesc, srv)
}

func _Crud_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crud_Page_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).Page(ctx, req.(*PageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crud_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_Delet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).Delet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crud_Delet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).Delet(ctx, req.(*DeletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crud_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crud_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crud_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Crud_ServiceDesc is the grpc.ServiceDesc for Crud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space.Crud",
	HandlerType: (*CrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Page",
			Handler:    _Crud_Page_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Crud_Add_Handler,
		},
		{
			MethodName: "Delet",
			Handler:    _Crud_Delet_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Crud_Info_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Crud_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Crud_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/space.proto",
}

const (
	Oss_SignUrl_FullMethodName = "/space.Oss/SignUrl"
)

// OssClient is the client API for Oss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OssClient interface {
	// OSS签名
	SignUrl(ctx context.Context, in *OssSignReq, opts ...grpc.CallOption) (*OssSignRes, error)
}

type ossClient struct {
	cc grpc.ClientConnInterface
}

func NewOssClient(cc grpc.ClientConnInterface) OssClient {
	return &ossClient{cc}
}

func (c *ossClient) SignUrl(ctx context.Context, in *OssSignReq, opts ...grpc.CallOption) (*OssSignRes, error) {
	out := new(OssSignRes)
	err := c.cc.Invoke(ctx, Oss_SignUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OssServer is the server API for Oss service.
// All implementations must embed UnimplementedOssServer
// for forward compatibility
type OssServer interface {
	// OSS签名
	SignUrl(context.Context, *OssSignReq) (*OssSignRes, error)
	mustEmbedUnimplementedOssServer()
}

// UnimplementedOssServer must be embedded to have forward compatible implementations.
type UnimplementedOssServer struct {
}

func (UnimplementedOssServer) SignUrl(context.Context, *OssSignReq) (*OssSignRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUrl not implemented")
}
func (UnimplementedOssServer) mustEmbedUnimplementedOssServer() {}

// UnsafeOssServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OssServer will
// result in compilation errors.
type UnsafeOssServer interface {
	mustEmbedUnimplementedOssServer()
}

func RegisterOssServer(s grpc.ServiceRegistrar, srv OssServer) {
	s.RegisterService(&Oss_ServiceDesc, srv)
}

func _Oss_SignUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OssSignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServer).SignUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oss_SignUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServer).SignUrl(ctx, req.(*OssSignReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Oss_ServiceDesc is the grpc.ServiceDesc for Oss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space.Oss",
	HandlerType: (*OssServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUrl",
			Handler:    _Oss_SignUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/space.proto",
}
